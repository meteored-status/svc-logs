{"version":3,"file":"plugins/mrpack/framework.js","mappings":"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","sources":["webpack://services-comun/./tools/src/mrpack/clases/framework.ts"],"sourcesContent":["import path from \"node:path\";\nimport os from \"node:os\";\nimport { Colors } from \"./colors\";\nimport { Comando } from \"./comando\";\nimport { isDir, isFile, readDir, readFileString, readJSON, rmdir, safeWrite } from \"../../../../modules/utiles/fs\";\nimport { md5 } from \"../../../../modules/utiles/hash\";\nimport { mkdir, rename, unlink } from \"../../../../modules/utiles/fs\";\nimport { Yarn } from \"./yarn\";\nexport class Framework {\n    /* STATIC */\n    static async add(basedir, frameworks) {\n        console.log(Colors.colorize([Colors.FgCyan, Colors.Bright], \"AÃ±adiendo frameworks\"));\n        console.group();\n        if (os.platform() == \"win32\") {\n            console.log(Colors.colorize([Colors.FgRed], \"No disponible en Windows\"));\n            console.groupEnd();\n            return false;\n        }\n        await mkdir(`${basedir}/tmp`, true);\n        const promesas = [];\n        for (const dir of frameworks) {\n            promesas.push(this.download(dir, `${basedir}/framework/${dir}`));\n        }\n        const cambios = await Promise.all(promesas)\n            .catch((err) => {\n            console.groupEnd();\n            return Promise.reject(err);\n        });\n        console.groupEnd();\n        if (!cambios.reduce((a, b) => a || b, false)) {\n            return false;\n        }\n        await Yarn.install(basedir, { verbose: false });\n        return true;\n    }\n    static async remove(basedir, frameworks) {\n        console.log(Colors.colorize([Colors.FgCyan, Colors.Bright], \"Eliminando frameworks\"));\n        console.group();\n        if (os.platform() == \"win32\") {\n            console.log(Colors.colorize([Colors.FgRed], \"No disponible en Windows\"));\n            console.groupEnd();\n            return false;\n        }\n        await mkdir(`${basedir}/tmp`, true);\n        const promesas = [];\n        for (const dir of frameworks.filter(framework => framework != \"services-comun\")) {\n            if (await isDir(`${basedir}/framework/${dir}`)) {\n                console.log(Colors.colorize([Colors.FgMagenta], dir), `=> Eliminando`);\n                promesas.push(unlink(`${basedir}/framework/${dir}`)\n                    .then(() => {\n                    console.log(Colors.colorize([Colors.FgMagenta], dir), `=> Eliminando [${Colors.colorize([Colors.FgGreen, Colors.Bright], \"OK   \")}]`);\n                    return true;\n                }).catch((err) => {\n                    console.log(Colors.colorize([Colors.FgMagenta], dir), `=> Eliminando [${Colors.colorize([Colors.FgRed, Colors.Bright], \"ERROR\")}]`);\n                    return Promise.reject(err);\n                }));\n            }\n        }\n        const cambios = await Promise.all(promesas)\n            .catch((err) => {\n            console.groupEnd();\n            return Promise.reject(err);\n        });\n        console.groupEnd();\n        if (!cambios.reduce((a, b) => a || b, false)) {\n            return false;\n        }\n        await Yarn.install(basedir, { verbose: false });\n        return true;\n    }\n    static async update(basedir) {\n        console.log(Colors.colorize([Colors.FgCyan, Colors.Bright], \"Comprobando frameworks\"));\n        console.group();\n        if (os.platform() == \"win32\") {\n            console.log(Colors.colorize([Colors.FgRed], \"No disponible en Windows\"));\n            console.groupEnd();\n            return false;\n        }\n        await mkdir(`${basedir}/tmp`, true);\n        const promesas = [];\n        for (const dir of await readDir(`${basedir}/framework`)) {\n            promesas.push(this.download(dir, `${basedir}/framework/${dir}`));\n        }\n        const cambios = await Promise.all(promesas)\n            .catch((err) => {\n            console.groupEnd();\n            return Promise.reject(err);\n        });\n        console.groupEnd();\n        return cambios.reduce((a, b) => a || b, false);\n    }\n    static async push(basedir) {\n        console.log(Colors.colorize([Colors.FgCyan, Colors.Bright], \"Enviando frameworks\"));\n        console.group();\n        if (os.platform() == \"win32\") {\n            console.log(Colors.colorize([Colors.FgRed], \"No disponible en Windows\"));\n            console.groupEnd();\n            return false;\n        }\n        const tmp = `${basedir}/tmp`;\n        await mkdir(tmp, true);\n        for (const item of await readDir(tmp)) {\n            await unlink(`${tmp}/${item}`);\n        }\n        const promesas = [];\n        for (const dir of await readDir(`${basedir}/framework`)) {\n            promesas.push(this.upload(dir, `${basedir}/framework/${dir}`, `${tmp}/${dir}`));\n        }\n        const exito = await Promise.all(promesas)\n            .catch((err) => {\n            console.groupEnd();\n            return Promise.reject(err);\n        });\n        console.groupEnd();\n        return exito.reduce((a, b) => a || b, false);\n    }\n    static dateVersion(version) {\n        const [version_fecha, version_index] = version.split(\"+\");\n        const version_fecha_date = new Date(version_fecha);\n        version_fecha_date.setUTCMinutes(parseInt(version_index));\n        return version_fecha_date.getTime();\n    }\n    static async parseDir(dir) {\n        const salida = [];\n        if (await isDir(dir)) {\n            for (const actual of await readDir(dir)) {\n                const name = dir + \"/\" + actual;\n                if (await isDir(name)) {\n                    salida.push(await this.parseDir(name));\n                }\n                else if (await isFile(name)) {\n                    salida.push(md5(await readFileString(name)));\n                }\n            }\n            return salida.join(\"\");\n        }\n        if (await isFile(dir)) {\n            return md5(await readFileString(dir));\n        }\n        return \"\";\n    }\n    static async upload(nombre, dirname, tmp) {\n        const paquete = await readJSON(`${dirname}/package.json`);\n        const version = paquete.version ?? \"2022.1.1+0\";\n        const versionNumber = this.dateVersion(version);\n        const hash = paquete.hash ?? \"\";\n        const { status, stdout } = await Comando.spawn(\"gsutil\", [\"cat\", `gs://meteored-yarn-workspaces/${nombre}/package.json`]);\n        if (status == 0) {\n            const actual = JSON.parse(stdout);\n            const actualNumber = this.dateVersion(actual.version ?? \"0000.00.00+0\");\n            if (actualNumber > versionNumber) {\n                console.log(Colors.colorize([Colors.FgMagenta], nombre), `=> Existe una nueva versiÃ³n para descargar ${Colors.colorize([Colors.FgBlue], version)} => ${Colors.colorize([Colors.FgGreen], actual.version)} [${Colors.colorize([Colors.FgRed, Colors.Bright], \"ERROR\")}]`);\n                return false;\n            }\n        }\n        delete paquete.version;\n        delete paquete.hash;\n        await safeWrite(`${dirname}/package.json`, `${JSON.stringify(paquete, null, 2)}\\n`, true);\n        await mkdir(tmp, true);\n        if (await isDir(`${dirname}/files`)) {\n            await rename(`${dirname}/files`, `${tmp}/files`);\n        }\n        const md_5 = md5(await this.parseDir(`${dirname}/`));\n        if (md_5 !== hash) {\n            const partes = /^(\\d{4}\\.\\d{1,2}\\.\\d{1,2})\\+(\\d+)$/.exec(version);\n            let fecha, index;\n            if (partes == null) {\n                fecha = \"2022.1.1\";\n                index = \"1\";\n            }\n            else {\n                fecha = partes[1];\n                index = partes[2];\n            }\n            const date = new Date();\n            const fechaActual = [\n                date.getUTCFullYear(),\n                date.getUTCMonth() + 1,\n                date.getUTCDate(),\n            ].join(\".\");\n            let indice;\n            if (fecha === fechaActual) {\n                indice = parseInt(index) + 1;\n            }\n            else {\n                indice = 1;\n            }\n            await this.updatePackage(dirname, paquete, `${fechaActual}+${indice}`, md_5);\n            console.log(Colors.colorize([Colors.FgMagenta], nombre), `=> Subiendo nueva versiÃ³n ${Colors.colorize([Colors.FgBlue], version)} => ${Colors.colorize([Colors.FgGreen], paquete.version)}`);\n            await Comando.spawn(\"gsutil\", [\"-o\", '\"GSUtil:parallel_process_count=1\"', \"-m\", \"rm\", \"-r\", `gs://meteored-yarn-workspaces/${nombre}`]);\n            await Comando.spawn(\"gsutil\", [\"-o\", '\"GSUtil:parallel_process_count=1\"', \"-m\", \"cp\", \"-r\", dirname, \"gs://meteored-yarn-workspaces/\"]);\n            console.log(Colors.colorize([Colors.FgMagenta], nombre), `=> Subiendo nueva versiÃ³n ${Colors.colorize([Colors.FgBlue], version)} => ${Colors.colorize([Colors.FgGreen], paquete.version)} [${Colors.colorize([Colors.FgGreen, Colors.Bright], \"OK   \")}]`);\n        }\n        else {\n            await this.updatePackage(dirname, paquete, version, hash);\n            if (status > 0) {\n                console.log(Colors.colorize([Colors.FgMagenta], nombre), `=> Subiendo versiÃ³n ${Colors.colorize([Colors.FgBlue], version)}`);\n                await Comando.spawn(\"gsutil\", [\"-o\", '\"GSUtil:parallel_process_count=1\"', \"-m\", \"cp\", \"-r\", dirname, \"gs://meteored-yarn-workspaces/\"]);\n                console.log(Colors.colorize([Colors.FgMagenta], nombre), `=> Subiendo versiÃ³n ${Colors.colorize([Colors.FgBlue], version)} [${Colors.colorize([Colors.FgGreen, Colors.Bright], \"OK   \")}]`);\n            }\n            else {\n                console.log(Colors.colorize([Colors.FgMagenta], nombre), `=> ${Colors.colorize([Colors.FgBlue], \"Nada que subir\")}`);\n            }\n        }\n        if (await isDir(`${tmp}/files`)) {\n            await rename(`${tmp}/files`, `${dirname}/files`);\n        }\n        await rmdir(tmp);\n        return true;\n    }\n    static async updatePackage(dirname, paquete, version, hash) {\n        paquete.version = version;\n        paquete.hash = hash;\n        await safeWrite(`${dirname}/package.json`, `${JSON.stringify(paquete, null, 2)}\\n`, true);\n    }\n    static async download(nombre, dirname) {\n        const viejo = await isFile(`${dirname}/package.json`);\n        const paquete = viejo ? await readJSON(`${dirname}/package.json`) : {\n            version: \"0000.0.0+0\",\n        };\n        const version = paquete.version ?? \"0000.0.0+0\";\n        const versionNumber = this.dateVersion(version);\n        let actual = paquete;\n        {\n            const { status, stdout, stderr, } = await Comando.spawn(\"gsutil\", [\"cat\", `gs://meteored-yarn-workspaces/${nombre}/package.json`]);\n            if (status == 0) {\n                actual = JSON.parse(stdout);\n                const actualNumber = this.dateVersion(actual.version);\n                if (versionNumber >= actualNumber) {\n                    console.log(Colors.colorize([Colors.FgMagenta], nombre), `=> Actualizado ${Colors.colorize([Colors.FgBlue], version)}`);\n                    return false;\n                }\n                if (viejo) {\n                    console.log(Colors.colorize([Colors.FgMagenta], nombre), `=> Nueva versiÃ³n ${Colors.colorize([Colors.FgBlue], version)} => ${Colors.colorize([Colors.FgGreen], actual.version)}`);\n                }\n                else {\n                    console.log(Colors.colorize([Colors.FgMagenta], nombre), `=> Instalando ${Colors.colorize([Colors.FgGreen], actual.version)}`);\n                }\n            }\n            else {\n                if (!stderr.includes(\"No URLs matched\")) {\n                    console.log(Colors.colorize([Colors.FgMagenta], nombre), `=> [${Colors.colorize([Colors.FgRed, Colors.Bright], \"ERROR\")}]`);\n                    console.log(Colors.colorize([Colors.FgMagenta], nombre), `=>`, stderr);\n                    return Promise.reject();\n                }\n                console.log(Colors.colorize([Colors.FgMagenta], nombre), `=> [${Colors.colorize([Colors.FgYellow, Colors.Bright], \"NUEVO\")}]`);\n                return true;\n            }\n        }\n        if (viejo) {\n            const { status, stdout, stderr } = await Comando.spawn(\"git\", [\"diff\", \"--name-only\", dirname]);\n            if (status != 0) {\n                console.log(Colors.colorize([Colors.FgMagenta], nombre), `=> ${Colors.colorize([Colors.FgRed], \"Error comprobando cambios locales\")}`);\n                console.log(Colors.colorize([Colors.FgMagenta], nombre), `=> ${stderr}`);\n                return Promise.reject();\n            }\n            const files = stdout.trim();\n            if (files.length > 0) {\n                return await this.downloadError(nombre, version, actual.version, files.split(\"\\n\"));\n            }\n        }\n        const tmp = path.resolve(dirname, \"../../tmp\");\n        await Promise.all([\n            this.clearTMP(`${tmp}/${nombre}`),\n            this.clearTMP(`${tmp}/${nombre}-old`),\n        ]);\n        const { status, stderr } = await Comando.spawn(\"gsutil\", [\"-o\", '\"GSUtil:parallel_process_count=1\"', \"-m\", \"cp\", \"-r\", `gs://meteored-yarn-workspaces/${nombre}`, tmp]);\n        if (status != 0) {\n            return await this.downloadError(nombre, version, actual.version, stderr.split(\"\\n\"));\n        }\n        if (viejo) {\n            if (await isDir(`${dirname}/files`)) {\n                await rename(`${dirname}/files`, `${tmp}/${nombre}/files`);\n            }\n            if (!await rename(dirname, `${tmp}/${nombre}-old`)) {\n                return await this.downloadError(nombre, version, actual.version, [`No se puede renombrar de ${dirname} a ${tmp}/${nombre}-old`]);\n            }\n        }\n        if (!await rename(`${tmp}/${nombre}`, dirname)) {\n            return await this.downloadError(nombre, version, actual.version, [`No se puede renombrar de ${tmp}/${nombre} a ${dirname}`]);\n        }\n        if (viejo) {\n            console.log(Colors.colorize([Colors.FgMagenta], nombre), `=> Nueva versiÃ³n ${Colors.colorize([Colors.FgBlue], version)} => ${Colors.colorize([Colors.FgGreen], actual.version)} [${Colors.colorize([Colors.FgGreen, Colors.Bright], \"OK   \")}]`);\n        }\n        else {\n            console.log(Colors.colorize([Colors.FgMagenta], nombre), `=> Instalando ${Colors.colorize([Colors.FgGreen], actual.version)} [${Colors.colorize([Colors.FgGreen, Colors.Bright], \"OK   \")}]`);\n        }\n        return true;\n    }\n    static async downloadError(nombre, anterior, nueva, detalle = []) {\n        console.log(Colors.colorize([Colors.FgMagenta], nombre), `=> Nueva versiÃ³n ${Colors.colorize([Colors.FgBlue], anterior)} => ${Colors.colorize([Colors.FgGreen], nueva)} [${Colors.colorize([Colors.FgRed, Colors.Bright], \"ERROR\")}]`);\n        console.group();\n        for (const linea of detalle) {\n            console.log(Colors.colorize([Colors.FgYellow], linea));\n        }\n        console.groupEnd();\n        return Promise.reject();\n    }\n    static async clearTMP(name) {\n        if (await isDir(name) || await isFile(name)) {\n            await unlink(name);\n        }\n    }\n}\n"],"names":["Framework","add","basedir","frameworks","console","log","colorize","FgCyan","Bright","group","FgRed","groupEnd","promesas","dir","push","this","download","cambios","Promise","all","catch","err","reject","reduce","a","b","install","verbose","remove","filter","framework","FgMagenta","then","FgGreen","update","tmp","item","upload","exito","dateVersion","version","version_fecha","version_index","split","version_fecha_date","Date","setUTCMinutes","parseInt","getTime","parseDir","salida","actual","name","join","nombre","dirname","paquete","versionNumber","hash","status","stdout","spawn","JSON","parse","FgBlue","stringify","md_5","partes","exec","fecha","index","date","fechaActual","getUTCFullYear","getUTCMonth","getUTCDate","indice","updatePackage","viejo","stderr","includes","FgYellow","files","trim","length","downloadError","clearTMP","anterior","nueva","detalle","linea"],"sourceRoot":""}