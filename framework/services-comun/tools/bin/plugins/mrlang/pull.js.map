{"version":3,"file":"plugins/mrlang/pull.js","mappings":"yIAKO,MAAMA,EAET,gBAAaC,CAAIC,EAASC,EAAS,IAC/B,UAAW,QAAO,GAAGD,mCACjB,OAAOE,QAAQC,OAAO,+EAE1B,MAAM,OAAEC,SAAiB,QAAS,GAAGJ,uBAC/BK,EAAM,GAAGL,eACTM,EAASC,KAAKC,iBAAiBJ,EAAQH,GACvCQ,EAAMC,OAAOC,KAAKP,EAAOQ,eACpB,QAAMP,UACP,QAAMA,GAAK,GAerB,MAAMQ,QAAgB,IAAcC,YAE9BF,SADqBV,QAAQa,WAAWN,EAAIO,QAAOC,IAAOA,EAAGC,SAAS,OAAMC,KAAIF,GAAM,IAAYG,KAAKH,EAAIb,EAAQS,OAC5FG,QAAOK,GAA2B,aAAjBA,EAAOC,SAAuBH,KAAIE,GAAUA,EAAOE,QAOjG,SALM,QAAU,GAAGvB,4BAAmCwB,KAAKC,UAAUZ,EAAQa,SAAU,KAAM,UACvFxB,QAAQyB,IAAI,IACXf,EAAQO,KAAIE,GAAUA,EAAOO,OAAO5B,EAASI,aAE9C,IAAGyB,QACLvB,EAAQ,CACR,MAAMwB,QAAgB,QAAS,GAAG9B,uBAClC8B,EAAQ1B,OAASA,QACX,QAAU,GAAGJ,sBAA6B,GAAGwB,KAAKC,UAAUK,EAAS,KAAM,QAAQ,EAC7F,CACJ,CACA,sBAAOC,CAAgB3B,EAAQa,GAC3B,IAAIX,GAAS,EACb,MAAM0B,EAAYf,EAAGgB,MAAM,KAC3B,IAAIC,EAASF,EAAUG,QACvB,KAAOH,EAAUI,OAAS,GAAG,CACzB,MAAMC,EAAQL,EAAUG,QAClBd,EAASjB,EAAOQ,QAAQsB,GAC9B,GAAcI,MAAVjB,EACAf,GAAS,EACTF,EAAOQ,QAAQsB,GAAU,CACrBK,QAAS,CAACF,QAGb,CACD,GAAsBC,MAAlBjB,EAAOmB,QAAsB,CAC7B,MAAMC,EAAMpB,EAAOmB,QAAQE,QAAQL,GAC/BI,GAAO,IACPnC,GAAS,EACTe,EAAOmB,QAAQG,OAAOF,EAAK,GAEnC,CACsBH,MAAlBjB,EAAOkB,UACFlB,EAAOkB,QAAQrB,SAASmB,KACzB/B,GAAS,EACTe,EAAOkB,QAAQK,KAAKP,GACpBhB,EAAOkB,QAAQM,QAM3B,CACAX,EAAS,GAAGA,KAAUG,GAC1B,CAMA,OAJcC,MADClC,EAAOQ,QAAQsB,KAE1B5B,GAAS,EACTF,EAAOQ,QAAQsB,GAAU,CAAC,GAEvB5B,CACX,CACA,uBAAOE,CAAiBJ,EAAQK,GAC5B,IAAIH,GAAS,EACb,IAAK,MAAMW,KAAMR,EAAK,CAClB,MAAMqC,EAAKvC,KAAKwB,gBAAgB3B,EAAQa,GACxCX,EAASA,GAAUwC,CACvB,CACA,GAAIxC,EAAQ,CACR,MAAMyC,EAAQ,CACVC,MAAO5C,EAAO4C,MACdpC,QAAS,CAAC,GAEd,IAAK,MAAMK,KAAMP,OAAOC,KAAKP,EAAOQ,SAASiC,OACzCE,EAAMnC,QAAQK,GAAMb,EAAOQ,QAAQK,GAEvCb,EAAOQ,QAAUmC,EAAMnC,OAC3B,CACA,OAAON,CACX,E","sources":["webpack://services-comun/./tools/src/mrlang/clases/pull.ts"],"sourcesContent":["import { isDir, mkdir, readJSON, safeWrite } from \"services-comun/modules/utiles/fs\";\nimport { IdiomasLoader } from \"./idioma/loader\";\nimport { ModuloMySQL } from \"./modulo/mysql\";\nimport { isFile } from \"../../../../modules/utiles/fs\";\nimport db from \"../mysql\";\nexport class Pull {\n    /* STATIC */\n    static async run(basedir, nuevos = []) {\n        if (!await isFile(`${basedir}/i18n/.credenciales/mysql.json`)) {\n            return Promise.reject(\"No hay credenciales en /i18n/.credenciales/ para descargar las traducciones\");\n        }\n        const { config } = await readJSON(`${basedir}/i18n/package.json`);\n        const dir = `${basedir}/i18n/.json`;\n        const cambio = this.pullCheckModulos(config, nuevos);\n        const ids = Object.keys(config.modulos);\n        if (!await isDir(dir)) {\n            await mkdir(dir, true);\n            // } else {\n            //     const todos = ids.length==0;\n            //     const checks = [...ids];\n            //     for (const file of Object.keys(config.modulos)) {\n            //         if (!checks.includes(file)) {\n            //             if (todos && await isDir(`${dir}/${file}`)) {\n            //                 ids.push(file);\n            //             } else {\n            //                 console.log(\"Borrando\", Colors.colorize([Colors.FgYellow, Colors.Bright],`${dir}/${file}`));\n            //                 await unlink(`${dir}/${file}`);\n            //             }\n            //         }\n            //     }\n        }\n        const idiomas = await IdiomasLoader.fromMySQL();\n        const modulosTodos = await Promise.allSettled(ids.filter(id => !id.includes(\".\")).map(id => ModuloMySQL.load(id, config, idiomas)));\n        const modulos = modulosTodos.filter(modulo => modulo.status == \"fulfilled\").map(modulo => modulo.value);\n        // await Promise.all(modulos.map(modulo => modulo.refreshHash()));\n        await safeWrite(`${basedir}/i18n/.json/idiomas.json`, JSON.stringify(idiomas.toJSON(), null, 2));\n        await Promise.all([\n            ...modulos.map(modulo => modulo.toFile(basedir, config)),\n        ]);\n        await db.close();\n        if (cambio) {\n            const paquete = await readJSON(`${basedir}/i18n/package.json`);\n            paquete.config = config;\n            await safeWrite(`${basedir}/i18n/package.json`, `${JSON.stringify(paquete, null, 2)}\\n`, true);\n        }\n    }\n    static pullCheckModulo(config, id) {\n        let cambio = false;\n        const jerarquia = id.split(\".\");\n        let actual = jerarquia.shift();\n        while (jerarquia.length > 0) {\n            const nuevo = jerarquia.shift();\n            const modulo = config.modulos[actual];\n            if (modulo == undefined) {\n                cambio = true;\n                config.modulos[actual] = {\n                    include: [nuevo],\n                };\n            }\n            else {\n                if (modulo.exclude != undefined) {\n                    const idx = modulo.exclude.indexOf(nuevo);\n                    if (idx >= 0) {\n                        cambio = true;\n                        modulo.exclude.splice(idx, 1);\n                    }\n                }\n                if (modulo.include != undefined) {\n                    if (!modulo.include.includes(nuevo)) {\n                        cambio = true;\n                        modulo.include.push(nuevo);\n                        modulo.include.sort();\n                    }\n                }\n                else {\n                    // todo, aquí tenemos que meter el resto de módulos y valores que ya existían y no se declararon\n                }\n            }\n            actual = `${actual}.${nuevo}`;\n        }\n        const modulo = config.modulos[actual];\n        if (modulo == undefined) {\n            cambio = true;\n            config.modulos[actual] = {};\n        }\n        return cambio;\n    }\n    static pullCheckModulos(config, ids) {\n        let cambio = false;\n        for (const id of ids) {\n            const ok = this.pullCheckModulo(config, id);\n            cambio = cambio || ok;\n        }\n        if (cambio) {\n            const nueva = {\n                langs: config.langs,\n                modulos: {},\n            };\n            for (const id of Object.keys(config.modulos).sort()) {\n                nueva.modulos[id] = config.modulos[id];\n            }\n            config.modulos = nueva.modulos;\n        }\n        return cambio;\n    }\n}\n"],"names":["Pull","run","basedir","nuevos","Promise","reject","config","dir","cambio","this","pullCheckModulos","ids","Object","keys","modulos","idiomas","fromMySQL","allSettled","filter","id","includes","map","load","modulo","status","value","JSON","stringify","toJSON","all","toFile","close","paquete","pullCheckModulo","jerarquia","split","actual","shift","length","nuevo","undefined","include","exclude","idx","indexOf","splice","push","sort","ok","nueva","langs"],"sourceRoot":""}