const comments: RegExp = /<!--[\s\S]*?-->/gi;
const tags: RegExp = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi;

const DECODED_ENTITIES: string[] = [
    '&quot;',
    '&amp;',
    '&lt;',
    '&gt;',
    '&nbsp;',
    '&iexcl;',
    '&cent;',
    '&pound;',
    '&curren;',
    '&yen;',
    '&brvbar;',
    '&sect;',
    '&uml;',
    '&copy;',
    '&ordf;',
    '&laquo;',
    '&not;',
    '&shy;',
    '&reg;',
    '&macr;',
    '&deg;',
    '&plusmn;',
    '&sup2;',
    '&sup3;',
    '&acute;',
    '&micro;',
    '&para;',
    '&middot;',
    '&cedil;',
    '&sup1;',
    '&ordm;',
    '&raquo;',
    '&frac14;',
    '&frac12;',
    '&frac34;',
    '&iquest;',
    '&Agrave;',
    '&Aacute;',
    '&Acirc;',
    '&Atilde;',
    '&Auml;',
    '&Aring;',
    '&AElig;',
    '&Ccedil;',
    '&Egrave;',
    '&Eacute;',
    '&Ecirc;',
    '&Euml;',
    '&Igrave;',
    '&Iacute;',
    '&Icirc;',
    '&Iuml;',
    '&ETH;',
    '&Ntilde;',
    '&Ograve;',
    '&Oacute;',
    '&Ocirc;',
    '&Otilde;',
    '&Ouml;',
    '&times;',
    '&Oslash;',
    '&Ugrave;',
    '&Uacute;',
    '&Ucirc;',
    '&Uuml;',
    '&Yacute;',
    '&THORN;',
    '&szlig;',
    '&agrave;',
    '&aacute;',
    '&acirc;',
    '&atilde;',
    '&auml;',
    '&aring;',
    '&aelig;',
    '&ccedil;',
    '&egrave;',
    '&eacute;',
    '&ecirc;',
    '&euml;',
    '&igrave;',
    '&iacute;',
    '&icirc;',
    '&iuml;',
    '&eth;',
    '&ntilde;',
    '&ograve;',
    '&oacute;',
    '&ocirc;',
    '&otilde;',
    '&ouml;',
    '&divide;',
    '&oslash;',
    '&ugrave;',
    '&uacute;',
    '&ucirc;',
    '&uuml;',
    '&yacute;',
    '&thorn;',
    '&yuml;',
    '&forall;',
    '&part;',
    '&exist;',
    '&empty;',
    '&nabla;',
    '&isin;',
    '&notin;',
    '&ni;',
    '&prod;',
    '&sum;',
    '&minus;',
    '&lowast;',
    '&radic;',
    '&prop;',
    '&infin;',
    '&ang;',
    '&and;',
    '&or;',
    '&cap;',
    '&cup;',
    '&int;',
    '&there4;',
    '&sim;',
    '&cong;',
    '&asymp;',
    '&ne;',
    '&equiv;',
    '&le;',
    '&ge;',
    '&sub;',
    '&sup;',
    '&nsub;',
    '&sube;',
    '&supe;',
    '&oplus;',
    '&otimes;',
    '&perp;',
    '&sdot;',
    '&Alpha;',
    '&Beta;',
    '&Gamma;',
    '&Delta;',
    '&Epsilon;',
    '&Zeta;',
    '&Eta;',
    '&Theta;',
    '&Iota;',
    '&Kappa;',
    '&Lambda;',
    '&Mu;',
    '&Nu;',
    '&Xi;',
    '&Omicron;',
    '&Pi;',
    '&Rho;',
    '&Sigma;',
    '&Tau;',
    '&Upsilon;',
    '&Phi;',
    '&Chi;',
    '&Psi;',
    '&Omega;',
    '&alpha;',
    '&beta;',
    '&gamma;',
    '&delta;',
    '&epsilon;',
    '&zeta;',
    '&eta;',
    '&theta;',
    '&iota;',
    '&kappa;',
    '&lambda;',
    '&mu;',
    '&nu;',
    '&xi;',
    '&omicron;',
    '&pi;',
    '&rho;',
    '&sigmaf;',
    '&sigma;',
    '&tau;',
    '&upsilon;',
    '&phi;',
    '&chi;',
    '&psi;',
    '&omega;',
    '&thetasym;',
    '&upsih;',
    '&piv;',
    '&ensp;',
    '&emsp;',
    '&thinsp;',
    '&zwnj;',
    '&zwj;',
    '&lrm;',
    '&rlm;',
    '&ndash;',
    '&mdash;',
    '&lsquo;',
    '&rsquo;',
    '&sbquo;',
    '&ldquo;',
    '&rdquo;',
    '&bdquo;',
    '&dagger;',
    '&Dagger;',
    '&bull;',
    '&hellip;',
    '&permil;',
    '&prime;',
    '&Prime;',
    '&lsaquo;',
    '&rsaquo;',
    '&oline;',
    '&frasl;',
    '&euro;',
    '&image;',
    '&weierp;',
    '&real;',
    '&trade;',
    '&alefsym;',
    '&larr;',
    '&uarr;',
    '&rarr;',
    '&darr;',
    '&harr;',
    '&crarr;',
    '&lArr;',
    '&uArr;',
    '&rArr;',
    '&dArr;',
    '&hArr;',
    '&forall;',
    '&part;',
    '&exist;',
    '&empty;',
    '&nabla;',
    '&isin;',
    '&notin;',
    '&ni;',
    '&prod;',
    '&sum;',
    '&minus;',
    '&lowast;',
    '&radic;',
    '&prop;',
    '&infin;',
    '&ang;',
    '&and;',
    '&or;',
    '&cap;',
    '&cup;',
    '&int;',
    '&there4;',
    '&sim;',
    '&cong;',
    '&asymp;',
    '&ne;',
    '&equiv;',
    '&le;',
    '&ge;',
    '&sub;',
    '&sup;',
    '&nsub;',
    '&sube;',
    '&supe;',
    '&oplus;',
    '&otimes;',
    '&perp;',
    '&sdot;',
    '&#039;',
    '&#487;',
    '&#351;',
    '&#601;',
    '&#305;',
    '&#223;',
];
const ENCODED_ENTITIES: string[] = [
    '"',
    '&',
    '<',
    '>',
    ' ',
    '¡',
    '¢',
    '£',
    '¤',
    '¥',
    '¦',
    '§',
    '¨',
    '©',
    'ª',
    '«',
    '¬',
    '­',
    '®',
    '¯',
    '°',
    '±',
    '²',
    '³',
    '´',
    'µ',
    '¶',
    '·',
    '¸',
    '¹',
    'º',
    '»',
    '¼',
    '½',
    '¾',
    '¿',
    'À',
    'Á',
    'Â',
    'Ã',
    'Ä',
    'Å',
    'Æ',
    'Ç',
    'È',
    'É',
    'Ê',
    'Ë',
    'Ì',
    'Í',
    'Î',
    'Ï',
    'Ð',
    'Ñ',
    'Ò',
    'Ó',
    'Ô',
    'Õ',
    'Ö',
    '×',
    'Ø',
    'Ù',
    'Ú',
    'Û',
    'Ü',
    'Ý',
    'Þ',
    'ß',
    'à',
    'á',
    'â',
    'ã',
    'ä',
    'å',
    'æ',
    'ç',
    'è',
    'é',
    'ê',
    'ë',
    'ì',
    'í',
    'î',
    'ï',
    'ð',
    'ñ',
    'ò',
    'ó',
    'ô',
    'õ',
    'ö',
    '÷',
    'ø',
    'ù',
    'ú',
    'û',
    'ü',
    'ý',
    'þ',
    'ÿ',
    '∀',
    '∂',
    '∃',
    '∅',
    '∇',
    '∈',
    '∉',
    '∋',
    '∏',
    '∑',
    '−',
    '∗',
    '√',
    '∝',
    '∞',
    '∠',
    '∧',
    '∨',
    '∩',
    '∪',
    '∫',
    '∴',
    '∼',
    '≅',
    '≈',
    '≠',
    '≡',
    '≤',
    '≥',
    '⊂',
    '⊃',
    '⊄',
    '⊆',
    '⊇',
    '⊕',
    '⊗',
    '⊥',
    '⋅',
    'Α',
    'Β',
    'Γ',
    'Δ',
    'Ε',
    'Ζ',
    'Η',
    'Θ',
    'Ι',
    'Κ',
    'Λ',
    'Μ',
    'Ν',
    'Ξ',
    'Ο',
    'Π',
    'Ρ',
    'Σ',
    'Τ',
    'Υ',
    'Φ',
    'Χ',
    'Ψ',
    'Ω',
    'α',
    'β',
    'γ',
    'δ',
    'ε',
    'ζ',
    'η',
    'θ',
    'ι',
    'κ',
    'λ',
    'μ',
    'ν',
    'ξ',
    'ο',
    'π',
    'ρ',
    'ς',
    'σ',
    'τ',
    'υ',
    'φ',
    'χ',
    'ψ',
    'ω',
    'ϑ',
    'ϒ',
    'ϖ',
    ' ',
    ' ',
    ' ',
    '‌',
    '‍',
    '‎',
    '‏',
    '–',
    '—',
    '‘',
    '’',
    '‚',
    '“',
    '”',
    '„',
    '†',
    '‡',
    '•',
    '…',
    '‰',
    '′',
    '″',
    '‹',
    '›',
    '‾',
    '⁄',
    '€',
    'ℑ',
    '℘',
    'ℜ',
    '™',
    'ℵ',
    '←',
    '↑',
    '→',
    '↓',
    '↔',
    '↵',
    '⇐',
    '⇑',
    '⇒',
    '⇓',
    '⇔',
    '∀',
    '∂',
    '∃',
    '∅',
    '∇',
    '∈',
    '∉',
    '∋',
    '∏',
    '∑',
    '−',
    '∗',
    '√',
    '∝',
    '∞',
    '∠',
    '∧',
    '∨',
    '∩',
    '∪',
    '∫',
    '∴',
    '∼',
    '≅',
    '≈',
    '≠',
    '≡',
    '≤',
    '≥',
    '⊂',
    '⊃',
    '⊄',
    '⊆',
    '⊇',
    '⊕',
    '⊗',
    '⊥',
    '⋅',
    "'",
    'ǧ',
    'ş',
    'ə',
    'ı',
    'ß',
];
const ENCODED_ENTITIES_SVG: string[] = [
    '&',
    '>',
    '<',
    '"',
    "'",
];
const DECODED_ENTITIES_SVG: string[] = [
    '&amp;',
    '&gt;',
    '&lt;',
    '&quot;',
    '&#039;',
];

const URL_INVALID: string[] = [
    '&#40;',
    '&#41;',
    '&#45;',
    '(',
    ')',
    '&#46;',
    '&#49;',
    '&iexcl;',
    '&iquest;',
    '&laquo;',
    '&raquo;',
    '&quot;',
    '&amp;',
    'lt&;',
    'gt&;',
    '&#039;',
    '´',
    "'",
    ',',
    '!',
    '.',
    '&rsquo;',
    '&#47;',
    '/'
];

export const strip_tags = (text: string, allowed: string = '') => {
    allowed = (allowed.toLowerCase().match(/<[a-z][a-z0-9]*>/g)||[]).join('');
    return text.replace(comments, '').replace(tags, (str:string, tag:string) => {
        return allowed.indexOf(`<${tag.toLowerCase()}>`) >= 0 ? str : '';
    });
}

export const fromEntities = (text: string, exclude: string[] = []) => {
    return text.replace(new RegExp(`(${DECODED_ENTITIES.filter(e => !exclude.includes(e)).join('|')})`, 'g'), (entity:string) => {
        const pos: number = DECODED_ENTITIES.indexOf(entity);
        if (pos >= 0) return ENCODED_ENTITIES[pos];
        return '';
    });
};

export const toEntities = (text: string) => {
    return text.replace(new RegExp(`(${ENCODED_ENTITIES.join('|')})`, 'g'), (entity:string) => {
        const pos: number = ENCODED_ENTITIES.indexOf(entity);
        if (pos >= 0) return DECODED_ENTITIES[pos];
        return '';
    });
};

export const toEntitiesSVG = (text: string) => {
    return text.replace(new RegExp(`(${ENCODED_ENTITIES_SVG.join('|')})`, 'g'), (entity:string) => {
        const pos: number = ENCODED_ENTITIES_SVG.indexOf(entity);
        if (pos >= 0) return DECODED_ENTITIES_SVG[pos];
        return '';
    });
}

export const removeAccents = (text: string) => {
    return text.normalize('NFD').replace(/[\u0300-\u036f]/g, "");
};

export const str_word_count = (text: string, additionals: string = '') => {
    const words: string[] = [];

    const len: number = text.length;
    const regAdtl: RegExp = new RegExp(`[${additionals}]`, 'i');

    let wordCandidate: string = '';

    for (let i = 0; i < len; i++) {
        const c: string = text.charAt(i);
        const validChar: boolean = (/[A-Za-z]/.test(c) || regAdtl.test(c) || ((i !== 0 && i !== len - 1) && c === '-') || (i !== 0 && c === "'"));

        if (validChar) {
            wordCandidate += c;
        }
        if (i === len - 1 || !validChar && wordCandidate !== '') {
            words.push(wordCandidate);
            wordCandidate = '';
        }
    }
    return words.length;
};

export const toUrl = (text: string) => {
    return encodeURI(
        toEntities(
            fromEntities(text)
        )
            .replace(new RegExp(`(${URL_INVALID.join('|')})`, 'g'), '')
            .replace('-', ' ')
    )
        .replace('%E2%80%8B', '')
        ;
};
